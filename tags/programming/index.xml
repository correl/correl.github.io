<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Projects and Coding Adventures</title>
    <link>https://correl.phoenixinquis.net/tags/programming.html</link>
    <description>Recent content in Programming on Projects and Coding Adventures</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jan 2018 00:00:00 -0500</lastBuildDate>
    <atom:link href="https://correl.phoenixinquis.net/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cleaner Recursive HTTP Requests with Elm Tasks</title>
      <link>https://correl.phoenixinquis.net/2018/01/23/cleaner-recursive-http-with-elm-tasks.html</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 -0500</pubDate>
      <guid>https://correl.phoenixinquis.net/2018/01/23/cleaner-recursive-http-with-elm-tasks.html</guid>
      <description>&lt;p&gt;&lt;em&gt;Continued from part one, &lt;a href=&#34;https://correl.phoenixinquis.net/2018/01/22/recursive-http-with-elm.html&#34;&gt;Recursive HTTP Requests with Elm&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://correl.phoenixinquis.net/2018/01/22/recursive-http-with-elm.html&#34;&gt;my last post&lt;/a&gt;, I described my first pass at building a library to&#xA;fetch data from a paginated JSON REST API. It worked, but it wasn&amp;rsquo;t&#xA;too clean. In particular, the handling of the multiple pages and&#xA;concatenation of results was left up to the calling code. Ideally,&#xA;both of these concerns should be handled by the library, letting the&#xA;application focus on working with a full result set. Using Elm&amp;rsquo;s&#xA;Tasks, we can achieve exactly that!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recursive HTTP Requests with Elm</title>
      <link>https://correl.phoenixinquis.net/2018/01/22/recursive-http-with-elm.html</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 -0500</pubDate>
      <guid>https://correl.phoenixinquis.net/2018/01/22/recursive-http-with-elm.html</guid>
      <description>&lt;p&gt;So I got the idea in my head that I wanted to pull data from the&#xA;GitLab / GitHub APIs in my Elm app. This seemed straightforward&#xA;enough; just wire up an HTTP request and a JSON decoder, and off I go.&#xA;Then I remember, oh crap&amp;hellip; like any sensible API with a potentially&#xA;huge amount of data behind it, the results come back &lt;em&gt;paginated&lt;/em&gt;. For&#xA;anyone unfamiliar, this means that a single API request for a list of,&#xA;say, repositories, is only going to return up to some maximum number&#xA;of results. If there are more results available, there will be a&#xA;reference to additional &lt;em&gt;pages&lt;/em&gt; of results, that you can then fetch&#xA;with &lt;em&gt;another&lt;/em&gt; API request. My single request decoding only the&#xA;results returned &lt;em&gt;from&lt;/em&gt; that single request wasn&amp;rsquo;t going to cut it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Birthday Puzzle</title>
      <link>https://correl.phoenixinquis.net/2015/04/18/birthday-puzzle.html</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 -0400</pubDate>
      <guid>https://correl.phoenixinquis.net/2015/04/18/birthday-puzzle.html</guid>
      <description>&lt;p&gt;This logic puzzle has been floating around the internet lately. When I&#xA;caught wind of it, I thought it would be a great exercise to tackle&#xA;using Prolog. I&amp;rsquo;m not especially good with the language yet, so it&#xA;added to the challenge a bit, but it was a pretty worthwhile&#xA;undertaking. When I got stumped, I discovered that mapping out the&#xA;birthdays into a grid helped me visualize the problem and ultimately&#xA;solve it, so I&amp;rsquo;ve included that with my prolog code so you can see how&#xA;I arrived at the answer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Coders at Work</title>
      <link>https://correl.phoenixinquis.net/2015/01/28/coders-at-work.html</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 -0500</pubDate>
      <guid>https://correl.phoenixinquis.net/2015/01/28/coders-at-work.html</guid>
      <description>&lt;p&gt;A few days before leaving work for a week and a half of flying and&#xA;cruising to escape frigid Pennsylvania, I came across a &lt;a href=&#34;#org-target--armstrong-oop&#34;&gt;Joe Armstrong&#xA;quote&lt;/a&gt; during my regularly scheduled slacking off on twitter and Hacker&#xA;News. I&amp;rsquo;d come across a couple times before, only this time I noticed&#xA;it had a source link. This led me to discovering (and shortly&#xA;thereafter, buying) Peter Seibel&amp;rsquo;s &amp;ldquo;&lt;a href=&#34;http://www.codersatwork.com/&#34;&gt;Coders at Work &amp;ndash; Reflections on&#xA;the Craft of Programming&lt;/a&gt;&amp;rdquo;. I loaded it onto my nook, and off I went.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adventuring Through SICP</title>
      <link>https://correl.phoenixinquis.net/2015/01/01/sicp.html</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 -0500</pubDate>
      <guid>https://correl.phoenixinquis.net/2015/01/01/sicp.html</guid>
      <description>&lt;p&gt;Back in May, a coworker and I got the idea to start up a little&#xA;seminar after work every couple of weeks with the plan to set aside&#xA;some time to learn and discuss new ideas together, along with anyone&#xA;else who cared to join us.&lt;/p&gt;&#xA;&lt;h2 id=&#34;learning-together&#34;&gt;Learning Together&lt;/h2&gt;&#xA;&lt;p&gt;Over the past several months, we&amp;rsquo;ve read our way through the first&#xA;three chapters of the book, watched the &lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/&#34;&gt;related video lectures&lt;/a&gt;, and&#xA;did (most of) the exercises.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Erlang: The Movie</title>
      <link>https://correl.phoenixinquis.net/2013/11/27/erlang-the-movie.html</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 -0500</pubDate>
      <guid>https://correl.phoenixinquis.net/2013/11/27/erlang-the-movie.html</guid>
      <description>&lt;p&gt;Hopping through &lt;a href=&#34;http://joearms.github.io/&#34;&gt;Joe Armstrong&amp;rsquo;s blog&lt;/a&gt;, I happened across Erlang: The Movie.&#xA;More programming languages need videos like this.&lt;/p&gt;&#xA;&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/xrIjfIjssLE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>Learning Functional Programming, Part One</title>
      <link>https://correl.phoenixinquis.net/2012/04/09/learning-functional-programming-part-one.html</link>
      <pubDate>Mon, 09 Apr 2012 00:00:00 -0400</pubDate>
      <guid>https://correl.phoenixinquis.net/2012/04/09/learning-functional-programming-part-one.html</guid>
      <description>&lt;h2 id=&#34;part-one-lambdas-in-my-python&#34;&gt;Part One: Lambdas? In my Python?&lt;/h2&gt;&#xA;&lt;p&gt;Over the past few months, I&amp;rsquo;ve decided to take a stab at learning some&#xA;functional programming. I&amp;rsquo;d been doing python for a few years (and&#xA;completely falling in love with it), and so I&amp;rsquo;d been exposed to a few&#xA;functional concepts it offers - primarily higher-order functions and list&#xA;comprehensions, both of which allow for very clear, concise and powerful code.&#xA;Since that&amp;rsquo;s where I started my journey, that&amp;rsquo;s where my post will begin as&#xA;well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transmission, RSS, and XBMC</title>
      <link>https://correl.phoenixinquis.net/2011/04/27/transmission-rss-and-xbmc.html</link>
      <pubDate>Wed, 27 Apr 2011 00:01:00 -0400</pubDate>
      <guid>https://correl.phoenixinquis.net/2011/04/27/transmission-rss-and-xbmc.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a huge fan of &lt;a href=&#34;http://www.xbmc.org/&#34;&gt;XBMC&lt;/a&gt;. My pc (currently running Ubuntu 10.04) has taken root in my&#xA;living room, piping all my movies and tv shows straight to my HDTV.&lt;/p&gt;&#xA;&lt;p&gt;While my pc is set up as a DVR using &lt;a href=&#34;http://www.mythtv.org&#34;&gt;MythTV&lt;/a&gt; to record shows off my FIOS box, it tends to be a little unreliable, which can suck when it&amp;rsquo;s time to catch up on Daily Show and Colbert episodes.&#xA;I&amp;rsquo;ve had &lt;a href=&#34;http://www.transmissionbt.com/&#34;&gt;Transmission&lt;/a&gt; set up for a while for all my torrenting needs, and&#xA;I&amp;rsquo;ve even written an &lt;a href=&#34;https://github.com/correl/Transmission-XBMC&#34;&gt;XBMC script to manage torrents&lt;/a&gt;, so I got to looking for&#xA;tools to track tv show torrent rss feeds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Meh.php</title>
      <link>https://correl.phoenixinquis.net/2011/04/27/meh-php.html</link>
      <pubDate>Wed, 27 Apr 2011 00:00:00 -0400</pubDate>
      <guid>https://correl.phoenixinquis.net/2011/04/27/meh-php.html</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;defined&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;meh&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#a6e22e&#34;&gt;define&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;meh&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Meh&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __set($name, $value) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __get($name) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;meh&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __isset($name) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __unset($name) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __call($name, $arguments) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;meh&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __callStatic($name, $arguments) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;meh&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$bwuh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Meh&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$bwuh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;give_a_shit&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $bwuh&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;concerns&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SuperDuperBillingProcessor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Meh&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SuperDuperBillingProcessor&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;calculateEverything&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;profit&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
